// <auto-generated>
//   This code file has automatically been added by the "Harmony.Extensions" NuGet package (https://www.nuget.org/packages/Harmony.Extensions).
//   Please see https://github.com/BUTR/Harmony.Extensions for more information.
//
//   IMPORTANT:
//   DO NOT DELETE THIS FILE if you are using a "packages.config" file to manage your NuGet references.
//   Consider migrating to PackageReferences instead:
//   https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference
//   Migrating brings the following benefits:
//   * The "Harmony.Extensions" folder and the "AccessTools2.cs" file don't appear in your project.
//   * The added file is immutable and can therefore not be modified by coincidence.
//   * Updating/Uninstalling the package will work flawlessly.
// </auto-generated>

#region License
// MIT License
//
// Copyright (c) Bannerlord's Unofficial Tools & Resources, Andreas Pardeike
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
#endregion

#if !HARMONYEXTENSIONS_DISABLE
#nullable enable
#if !HARMONYEXTENSIONS_ENABLEWARNINGS
#pragma warning disable
#endif

namespace HarmonyLib.BUTR.Extensions
{
    using global::System;
    using global::System.Reflection;
    using global::System.Reflection.Emit;

    /// <summary>An extension of Harmony's helper class for reflection related functions</summary>
    internal static partial class AccessTools2
    {
#if HARMONYEXTENSIONS_2_0_4
        /// <summary>Creates a field reference delegate for an instance field of a struct</summary>
        /// <typeparam name="T">The struct that defines the instance field</typeparam>
        /// <typeparam name="F">
        /// The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type),
        /// a type that <see cref="Type.IsAssignableFrom(Type)">is assignable from</see> that type; or if the field's type is an enum type,
        /// either that type or the underlying integral type of that enum type
        /// </typeparam>
        /// <param name="fieldName">The name of the field</param>
        /// <returns>A readable/assignable <see cref="AccessTools.StructFieldRef{T,F}"/> delegate</returns>
        public static AccessTools.StructFieldRef<T, F>? StructFieldRefAccess<T, F>(string fieldName) where T : struct
        {
            if (string.IsNullOrEmpty(fieldName))
                return null;

            var field = GetInstanceField(typeof(T), fieldName);
            if (field is null)
                return null;

            return StructFieldRefAccessInternal<T, F>(field);
        }

        /// <summary>Creates a field reference delegate for an instance field of a struct</summary>
        /// <typeparam name="T">The struct that defines the instance field</typeparam>
        /// <typeparam name="F">
        /// The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type),
        /// a type that <see cref="Type.IsAssignableFrom(Type)">is assignable from</see> that type; or if the field's type is an enum type,
        /// either that type or the underlying integral type of that enum type
        /// </typeparam>
        /// <param name="fieldInfo">The field</param>
        /// <returns>A readable/assignable <see cref="AccessTools.StructFieldRef{T,F}"/> delegate</returns>
        /// <remarks>
        /// <para>
        /// This method is meant for cases where the field has already been obtained, avoiding the field searching cost in
        /// e.g. <see cref="StructFieldRefAccess{T, F}(string)"/>.
        /// </para>
        /// </remarks>
        public static AccessTools.StructFieldRef<T, F>? StructFieldRefAccess<T, F>(FieldInfo? fieldInfo) where T : struct
        {
            if (fieldInfo is null)
                return null;

            if (!ValidateStructField<T, F>(fieldInfo))
                return null;

            return StructFieldRefAccessInternal<T, F>(fieldInfo);
        }

        
        private static AccessTools.StructFieldRef<T, F>? StructFieldRefAccessInternal<T, F>(FieldInfo fieldInfo) where T : struct
        {
            ValidateFieldType<F>(fieldInfo);

            var dm = DynamicMethodDefinitionHandle.Create(
                $"__refget_{typeof(T).Name}_struct_fi_{fieldInfo.Name}", typeof(F).MakeByRefType(), new[] { typeof(T).MakeByRefType() });

            if (dm?.GetILGenerator() is not { } il)
                return null;

            il.Emit(OpCodes.Ldarg_0);
            il.Emit(OpCodes.Ldflda, fieldInfo);
            il.Emit(OpCodes.Ret);

            return dm?.Generate() is { } methodInfo ? GetDelegate<AccessTools.StructFieldRef<T, F>>(methodInfo) : null;
        }
#endif
    }
}

#pragma warning restore
#nullable restore
#endif // HARMONYEXTENSIONS_DISABLE