{
  "api/HarmonyLib.BUTR.Extensions.AccessTools2.html": {
    "href": "api/HarmonyLib.BUTR.Extensions.AccessTools2.html",
    "title": "Class AccessTools2 | Harmony.Extensions Documentation",
    "keywords": "Class AccessTools2 An extension of Harmony's helper class for reflection related functions Inheritance Object AccessTools2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : HarmonyLib.BUTR.Extensions Assembly : Harmony.Extensions.dll Syntax public static class AccessTools2 Methods AllAssemblies() Enumerates all assemblies in the current app domain, excluding visual studio assemblies Declaration public static IEnumerable<Assembly> AllAssemblies() Returns IEnumerable < Assembly > An enumeration of Assembly AllTypes() Enumerates all successfully loaded types in the current app domain, excluding visual studio assemblies Declaration public static IEnumerable<Type> AllTypes() Returns IEnumerable < Type > An enumeration of all Type in all assemblies, excluding visual studio assemblies AsyncMoveNext(MethodBase) Gets the MoveNext() method of an async method's state machine Declaration public static MethodInfo AsyncMoveNext(MethodBase method) Parameters MethodBase method Async method that creates the state machine internally Returns MethodInfo The internal MoveNext() method of the async state machine or null if no valid async method is detected Constructor(String, Type[], Boolean, Boolean) Gets the reflection information for a constructor by searching the type Declaration public static ConstructorInfo Constructor(string typeString, Type[] parameters = null, bool searchForStatic = false, bool logErrorInTrace = true) Parameters String typeString The class/type full name where the constructor is declared Type [] parameters Optional parameters to target a specific overload of the method Boolean searchForStatic Optional parameters to only consider static constructors Boolean logErrorInTrace Returns ConstructorInfo A constructor info or null when type is null or when the method cannot be found Constructor(Type, Type[], Boolean, Boolean) Gets the reflection information for a constructor by searching the type and all its super types Declaration public static ConstructorInfo Constructor(Type type, Type[] parameters = null, bool searchForStatic = false, bool logErrorInTrace = true) Parameters Type type The class/type where the constructor is declared Type [] parameters Optional parameters to target a specific overload of the method Boolean searchForStatic Optional parameters to only consider static constructors Boolean logErrorInTrace Returns ConstructorInfo A constructor info or null when type is null or when the method cannot be found DeclaredConstructor(String, Type[], Boolean, Boolean) Gets the reflection information for a constructor by searching the type Declaration public static ConstructorInfo DeclaredConstructor(string typeString, Type[] parameters = null, bool searchForStatic = false, bool logErrorInTrace = true) Parameters String typeString The class/type full name where the constructor is declared Type [] parameters Optional parameters to target a specific overload of the method Boolean searchForStatic Optional parameters to only consider static constructors Boolean logErrorInTrace Returns ConstructorInfo A constructor info or null when type is null or when the method cannot be found DeclaredConstructor(Type, Type[], Boolean, Boolean) Gets the reflection information for a directly declared constructor Declaration public static ConstructorInfo DeclaredConstructor(Type type, Type[] parameters = null, bool searchForStatic = false, bool logErrorInTrace = true) Parameters Type type The class/type where the constructor is declared Type [] parameters Optional parameters to target a specific overload of the constructor Boolean searchForStatic Optional parameters to only consider static constructors Boolean logErrorInTrace Returns ConstructorInfo A constructor info or null when type is null or when the constructor cannot be found DeclaredField(String, Boolean) Declaration public static FieldInfo DeclaredField(string typeColonFieldname, bool logErrorInTrace = true) Parameters String typeColonFieldname Boolean logErrorInTrace Returns FieldInfo DeclaredField(Type, String, Boolean) Gets the reflection information for a directly declared field Declaration public static FieldInfo DeclaredField(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type where the field is defined String name The name of the field Boolean logErrorInTrace Returns FieldInfo A field or null when type/name is null or when the field cannot be found DeclaredIndexer(Type, Type[]) Gets the reflection information for a directly declared indexer property Declaration public static PropertyInfo DeclaredIndexer(Type type, Type[] parameters = null) Parameters Type type The class/type where the indexer property is declared Type [] parameters Optional parameters to target a specific overload of multiple indexers Returns PropertyInfo An indexer property or null when type is null or when it cannot be found DeclaredIndexerGetter(Type, Type[]) Gets the reflection information for the getter method of a directly declared indexer property Declaration public static MethodInfo DeclaredIndexerGetter(Type type, Type[] parameters = null) Parameters Type type The class/type where the indexer property is declared Type [] parameters Optional parameters to target a specific overload of multiple indexers Returns MethodInfo A method or null when type is null or when indexer property cannot be found DeclaredIndexerSetter(Type, Type[]) Gets the reflection information for the setter method of a directly declared indexer property Declaration public static MethodInfo DeclaredIndexerSetter(Type type, Type[] parameters) Parameters Type type The class/type where the indexer property is declared Type [] parameters Optional parameters to target a specific overload of multiple indexers Returns MethodInfo A method or null when type is null or when indexer property cannot be found DeclaredMethod(String, Type[], Type[], Boolean) Gets the reflection information for a directly declared method Declaration public static MethodInfo DeclaredMethod(string typeColonMethodname, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) Parameters String typeColonMethodname The target method in the form TypeFullName:MethodName , where the type name matches a form recognized by Type.GetType like Some.Namespace.Type . Type [] parameters Optional parameters to target a specific overload of the method Type [] generics Optional list of types that define the generic version of the method Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the method cannot be found DeclaredMethod(Type, String, Type[], Type[], Boolean) Gets the reflection information for a directly declared method Declaration public static MethodInfo DeclaredMethod(Type type, string name, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) Parameters Type type The class/type where the method is declared String name The name of the method (case sensitive) Type [] parameters Optional parameters to target a specific overload of the method Type [] generics Optional list of types that define the generic version of the method Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the method cannot be found DeclaredProperty(String, Boolean) Declaration public static PropertyInfo DeclaredProperty(string typeColonPropertyName, bool logErrorInTrace = true) Parameters String typeColonPropertyName Boolean logErrorInTrace Returns PropertyInfo DeclaredProperty(Type, String, Boolean) Gets the reflection information for a directly declared property Declaration public static PropertyInfo DeclaredProperty(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type where the property is declared String name The name of the property (case sensitive) Boolean logErrorInTrace Returns PropertyInfo A property or null when type/name is null or when the property cannot be found DeclaredPropertyGetter(String, Boolean) Declaration public static MethodInfo DeclaredPropertyGetter(string typeColonPropertyName, bool logErrorInTrace = true) Parameters String typeColonPropertyName Boolean logErrorInTrace Returns MethodInfo DeclaredPropertyGetter(Type, String, Boolean) Gets the reflection information for the getter method of a directly declared property Declaration public static MethodInfo DeclaredPropertyGetter(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type where the property is declared String name The name of the property (case sensitive) Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the property cannot be found DeclaredPropertySetter(String, Boolean) Declaration public static MethodInfo DeclaredPropertySetter(string typeColonPropertyName, bool logErrorInTrace = true) Parameters String typeColonPropertyName Boolean logErrorInTrace Returns MethodInfo DeclaredPropertySetter(Type, String, Boolean) Gets the reflection information for the setter method of a directly declared property Declaration public static MethodInfo DeclaredPropertySetter(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type where the property is declared String name The name of the property (case sensitive) Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the property cannot be found Field(String, Boolean) Declaration public static FieldInfo Field(string typeColonFieldname, bool logErrorInTrace = true) Parameters String typeColonFieldname Boolean logErrorInTrace Returns FieldInfo Field(Type, String, Boolean) Gets the reflection information for a field by searching the type and all its super types Declaration public static FieldInfo Field(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type where the field is defined String name The name of the field (case sensitive) Boolean logErrorInTrace Returns FieldInfo A field or null when type/name is null or when the field cannot be found FieldRefAccess<TField>(FieldInfo) Creates an instance field reference delegate for a private type Declaration public static AccessTools.FieldRef<object, TField>? FieldRefAccess<TField>(FieldInfo fieldInfo) Parameters FieldInfo fieldInfo The field Returns Nullable < AccessTools.FieldRef < Object , TField>> A read and writable AccessTools.FieldRef<T, F> delegate Type Parameters TField The type of the field FieldRefAccess<F>(String, Boolean) Declaration public static AccessTools.FieldRef<object, F>? FieldRefAccess<F>(string typeColonFieldname, bool logErrorInTrace = true) Parameters String typeColonFieldname Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef < Object , F>> Type Parameters F FieldRefAccess<F>(Type, String, Boolean) Creates a field reference delegate for an instance field of a class or static field (NOT an instance field of a struct) Declaration public static AccessTools.FieldRef<object, F>? FieldRefAccess<F>(Type type, string fieldName, bool logErrorInTrace = true) Parameters Type type The type that defines the field, or derived class of this type; must not be a struct type unless the field is static String fieldName The name of the field Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef < Object , F>> A readable/assignable delegate with T=object (for static fields, the instance delegate parameter is ignored) Type Parameters F The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type), a type that IsAssignableFrom(Type) that type; or if the field's type is an enum type, either that type or the underlying integral type of that enum type Remarks This method is meant for cases where the given type is only known at runtime and thus can't be used as a type parameter T in e.g. . FieldRefAccess<T, F>(FieldInfo, Boolean) Creates a field reference delegate for an instance field of a class or static field (NOT an instance field of a struct) Declaration public static AccessTools.FieldRef<T, F>? FieldRefAccess<T, F>(FieldInfo fieldInfo, bool logErrorInTrace = true) where T : class Parameters FieldInfo fieldInfo The field Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef <T, F>> A readable/assignable delegate Type Parameters T An arbitrary type if the field is static; otherwise the class that defines the field, or a parent class (including Object ), implemented interface, or derived class of this type (\" instanceOfT is FieldDeclaringType \" must be possible) F The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type), a type that IsAssignableFrom(Type) that type; or if the field's type is an enum type, either that type or the underlying integral type of that enum type Remarks This method is meant for cases where the field has already been obtained, avoiding the field searching cost in e.g. . FieldRefAccess<T, F>(String, Boolean) Creates a field reference delegate for an instance field of a class Declaration public static AccessTools.FieldRef<T, F>? FieldRefAccess<T, F>(string fieldName, bool logErrorInTrace = true) where T : class Parameters String fieldName The name of the field Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef <T, F>> A readable/assignable delegate Type Parameters T The class that defines the instance field, or derived class of this type F The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type), a type that IsAssignableFrom(Type) that type; or if the field's type is an enum type, either that type or the underlying integral type of that enum type FindIncludingBaseTypes<T>(Type, Func<Type, T>) Applies a function going up the type hierarchy and stops at the first non- null result Declaration public static T FindIncludingBaseTypes<T>(Type type, Func<Type, T> func) where T : class Parameters Type type The class/type to start with Func < Type , T> func The evaluation function returning T Returns T The first non- null result, or null if no match Type Parameters T Result type of func() Remarks The type hierarchy of a class or value type (including struct) does NOT include implemented interfaces, and the type hierarchy of an interface is only itself (regardless of whether that interface implements other interfaces). The top-most type in the type hierarchy of all non-interface types (including value types) is Object . GetConstructorDelegate<TDelegate>(String, Type[], Boolean) Declaration public static TDelegate GetConstructorDelegate<TDelegate>(string typeString, Type[] parameters = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeString Type [] parameters Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetConstructorDelegate<TDelegate>(Type, Type[], Boolean) Declaration public static TDelegate GetConstructorDelegate<TDelegate>(Type type, Type[] parameters = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type Type [] parameters Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredConstructorDelegate<TDelegate>(String, Type[], Boolean) Declaration public static TDelegate GetDeclaredConstructorDelegate<TDelegate>(string typeString, Type[] parameters = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeString Type [] parameters Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredConstructorDelegate<TDelegate>(Type, Type[], Boolean) Declaration public static TDelegate GetDeclaredConstructorDelegate<TDelegate>(Type type, Type[] parameters = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type Type [] parameters Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredDelegate<TDelegate>(Object, String, Type[], Type[], Boolean) Declaration public static TDelegate GetDeclaredDelegate<TDelegate>(object instance, string typeSemicolonMethod, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance String typeSemicolonMethod Type [] parameters Type [] generics Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredDelegate<TDelegate>(Object, Type, String, Type[], Type[], Boolean) Declaration public static TDelegate GetDeclaredDelegate<TDelegate>(object instance, Type type, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance Type type String method Type [] parameters Type [] generics Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredDelegate<TDelegate>(String, Type[], Type[], Boolean) Get a delegate for a method named method , directly declared by type . Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDeclaredDelegate<TDelegate>(string typeSemicolonMethod, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeSemicolonMethod Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDeclaredDelegate<TDelegate>(Type, String, Type[], Type[], Boolean) Get a delegate for a method named method , directly declared by type . Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDeclaredDelegate<TDelegate>(Type type, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type The type where the method is declared. String method The name of the method (case sensitive). Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDeclaredDelegate<TDelegate, TInstance>(TInstance, String, Type[], Type[], Boolean) Get a delegate for an instance method named method , directly declared by instance 's type. Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDeclaredDelegate<TDelegate, TInstance>(TInstance instance, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters TInstance instance The instance for which the method is defined. String method The name of the method (case sensitive). Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when instance or method is null or when the method cannot be found. Type Parameters TDelegate TInstance GetDeclaredDelegateObjectInstance<TDelegate>(String, Type[], Type[], Boolean) Get a delegate for a method named method , directly declared by type , and then bind it to an instance type of Object . Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDeclaredDelegateObjectInstance<TDelegate>(string typeSemicolonMethod, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeSemicolonMethod Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDeclaredDelegateObjectInstance<TDelegate>(Type, String, Type[], Type[], Boolean) Get a delegate for a method named method , directly declared by type , and then bind it to an instance type of Object . Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDeclaredDelegateObjectInstance<TDelegate>(Type type, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type The type from which to start searching for the method's definition. String method The name of the method (case sensitive). Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(Object, String, Boolean) Declaration public static TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(object instance, string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(Object, Type, String, Boolean) Declaration public static TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(object instance, Type type, string method, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance Type type String method Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(String, Boolean) Declaration public static TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(Type, String, Boolean) Declaration public static TDelegate GetDeclaredPropertyGetterDelegate<TDelegate>(Type type, string name, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type String name Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(Object, String, Boolean) Declaration public static TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(object instance, string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(Object, Type, String, Boolean) Declaration public static TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(object instance, Type type, string method, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance Type type String method Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(String, Boolean) Declaration public static TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(Type, String, Boolean) Declaration public static TDelegate GetDeclaredPropertySetterDelegate<TDelegate>(Type type, string name, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type String name Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDelegate<TDelegate>(Object, MethodInfo, Boolean) Get a delegate for an instance method described by methodInfo and bound to instance . Declaration public static TDelegate GetDelegate<TDelegate>(object instance, MethodInfo methodInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance The instance for which the method is defined. MethodInfo methodInfo The method's MethodInfo . Boolean logErrorInTrace Returns TDelegate A delegate or null when instance or methodInfo is null or when the method cannot be found. Type Parameters TDelegate GetDelegate<TDelegate>(Object, String, Type[], Type[], Boolean) Declaration public static TDelegate GetDelegate<TDelegate>(object instance, string typeSemicolonMethod, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance String typeSemicolonMethod Type [] parameters Type [] generics Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDelegate<TDelegate>(Object, Type, String, Type[], Type[], Boolean) Declaration public static TDelegate GetDelegate<TDelegate>(object instance, Type type, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance Type type String method Type [] parameters Type [] generics Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDelegate<TDelegate>(ConstructorInfo, Boolean) Declaration public static TDelegate GetDelegate<TDelegate>(ConstructorInfo constructorInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters ConstructorInfo constructorInfo Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDelegate<TDelegate>(MethodInfo, Boolean) Get a delegate for a method described by methodInfo . Declaration public static TDelegate GetDelegate<TDelegate>(MethodInfo methodInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters MethodInfo methodInfo The method's MethodInfo . Boolean logErrorInTrace Returns TDelegate A delegate or null when methodInfo is null . Type Parameters TDelegate GetDelegate<TDelegate>(String, Type[], Type[], Boolean) Get a delegate for a method named method , declared by type or any of its base types. Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDelegate<TDelegate>(string typeSemicolonMethod, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeSemicolonMethod Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDelegate<TDelegate>(Type, String, Type[], Type[], Boolean) Get a delegate for a method named method , declared by type or any of its base types. Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDelegate<TDelegate>(Type type, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type The type from which to start searching for the method's definition. String method The name of the method (case sensitive). Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDelegate<TDelegate, TInstance>(TInstance, MethodInfo, Boolean) Get a delegate for an instance method described by methodInfo and bound to instance . Declaration public static TDelegate GetDelegate<TDelegate, TInstance>(TInstance instance, MethodInfo methodInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters TInstance instance The instance for which the method is defined. MethodInfo methodInfo The method's MethodInfo . Boolean logErrorInTrace Returns TDelegate A delegate or null when instance or methodInfo is null or when the method cannot be found. Type Parameters TDelegate TInstance GetDelegate<TDelegate, TInstance>(TInstance, String, Type[], Type[], Boolean) Get a delegate for a method named method , declared by instance 's type or any of its base types. Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDelegate<TDelegate, TInstance>(TInstance instance, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters TInstance instance The instance for which the method is defined. String method The name of the method (case sensitive). Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when instance or method is null or when the method cannot be found. Type Parameters TDelegate TInstance GetDelegateObjectInstance<TDelegate>(MethodInfo, Boolean) Declaration public static TDelegate GetDelegateObjectInstance<TDelegate>(MethodInfo methodInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters MethodInfo methodInfo Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetDelegateObjectInstance<TDelegate>(String, Type[], Type[], Boolean) Get a delegate for a method named method , declared by type or any of its base types, and then bind it to an instance type of Object . Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDelegateObjectInstance<TDelegate>(string typeSemicolonMethod, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeSemicolonMethod Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetDelegateObjectInstance<TDelegate>(Type, String, Type[], Type[], Boolean) Get a delegate for a method named method , declared by type or any of its base types, and then bind it to an instance type of Object . Choose the overload with the given parameters if not null and/or the generic arguments generics if not null . Declaration public static TDelegate GetDelegateObjectInstance<TDelegate>(Type type, string method, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type The type from which to start searching for the method's definition. String method The name of the method (case sensitive). Type [] parameters The method's parameter types (when not null ). Type [] generics The generic arguments of the method (when not null ). Boolean logErrorInTrace Returns TDelegate A delegate or null when type or method is null or when the method cannot be found. Type Parameters TDelegate GetPropertyGetterDelegate<TDelegate>(Object, PropertyInfo, Boolean) Declaration public static TDelegate GetPropertyGetterDelegate<TDelegate>(object instance, PropertyInfo propertyInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance PropertyInfo propertyInfo Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertyGetterDelegate<TDelegate>(Object, String, Boolean) Declaration public static TDelegate GetPropertyGetterDelegate<TDelegate>(object instance, string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertyGetterDelegate<TDelegate>(Object, Type, String, Boolean) Declaration public static TDelegate GetPropertyGetterDelegate<TDelegate>(object instance, Type type, string method, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance Type type String method Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertyGetterDelegate<TDelegate>(PropertyInfo, Boolean) Declaration public static TDelegate GetPropertyGetterDelegate<TDelegate>(PropertyInfo propertyInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters PropertyInfo propertyInfo Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertyGetterDelegate<TDelegate>(String, Boolean) Declaration public static TDelegate GetPropertyGetterDelegate<TDelegate>(string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertyGetterDelegate<TDelegate>(Type, String, Boolean) Declaration public static TDelegate GetPropertyGetterDelegate<TDelegate>(Type type, string name, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type String name Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertySetterDelegate<TDelegate>(Object, PropertyInfo, Boolean) Declaration public static TDelegate GetPropertySetterDelegate<TDelegate>(object instance, PropertyInfo propertyInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance PropertyInfo propertyInfo Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertySetterDelegate<TDelegate>(Object, String, Boolean) Declaration public static TDelegate GetPropertySetterDelegate<TDelegate>(object instance, string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertySetterDelegate<TDelegate>(Object, Type, String, Boolean) Declaration public static TDelegate GetPropertySetterDelegate<TDelegate>(object instance, Type type, string method, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Object instance Type type String method Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertySetterDelegate<TDelegate>(PropertyInfo, Boolean) Declaration public static TDelegate GetPropertySetterDelegate<TDelegate>(PropertyInfo propertyInfo, bool logErrorInTrace = true) where TDelegate : Delegate Parameters PropertyInfo propertyInfo Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertySetterDelegate<TDelegate>(String, Boolean) Declaration public static TDelegate GetPropertySetterDelegate<TDelegate>(string typeColonPropertyName, bool logErrorInTrace = true) where TDelegate : Delegate Parameters String typeColonPropertyName Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetPropertySetterDelegate<TDelegate>(Type, String, Boolean) Declaration public static TDelegate GetPropertySetterDelegate<TDelegate>(Type type, string name, bool logErrorInTrace = true) where TDelegate : Delegate Parameters Type type String name Boolean logErrorInTrace Returns TDelegate Type Parameters TDelegate GetTypesFromAssembly(Assembly, Boolean) Gets all successfully loaded types from a given assembly Declaration public static Type[] GetTypesFromAssembly(Assembly assembly, bool logErrorInTrace = true) Parameters Assembly assembly The assembly Boolean logErrorInTrace Returns Type [] An array of types Remarks This calls and returns GetTypes() , while catching any thrown ReflectionTypeLoadException . If such an exception is thrown, returns the successfully loaded types ( Types , filtered for non-null values). GetTypesFromAssemblyIfValid(Assembly, Boolean) Gets all types from a given assembly if it has not any type loading related exceptions Declaration public static Type[] GetTypesFromAssemblyIfValid(Assembly assembly, bool logErrorInTrace = true) Parameters Assembly assembly The assembly Boolean logErrorInTrace Returns Type [] An array of types Remarks This calls and returns GetTypes() , while catching any thrown ReflectionTypeLoadException . If such an exception is thrown, returns an empty array. Indexer(Type, Type[]) Gets the reflection information for an indexer property by searching the type and all its super types Declaration public static PropertyInfo Indexer(Type type, Type[] parameters = null) Parameters Type type The class/type Type [] parameters Optional parameters to target a specific overload of multiple indexers Returns PropertyInfo An indexer property or null when type is null or when it cannot be found IndexerGetter(Type, Type[]) Gets the reflection information for the getter method of an indexer property by searching the type and all its super types Declaration public static MethodInfo IndexerGetter(Type type, Type[] parameters = null) Parameters Type type The class/type Type [] parameters Optional parameters to target a specific overload of multiple indexers Returns MethodInfo A method or null when type is null or when the indexer property cannot be found IndexerSetter(Type, Type[]) Gets the reflection information for the setter method of an indexer property by searching the type and all its super types Declaration public static MethodInfo IndexerSetter(Type type, Type[] parameters = null) Parameters Type type The class/type Type [] parameters Optional parameters to target a specific overload of multiple indexers Returns MethodInfo A method or null when type is null or when the indexer property cannot be found IsNumeric(Type) Declaration public static bool IsNumeric(this Type myType) Parameters Type myType Returns Boolean Method(String, Type[], Type[], Boolean) Gets the reflection information for a method by searching the type and all its super types Declaration public static MethodInfo Method(string typeColonMethodname, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) Parameters String typeColonMethodname The target method in the form TypeFullName:MethodName , where the type name matches a form recognized by Type.GetType like Some.Namespace.Type . Type [] parameters Optional parameters to target a specific overload of the method Type [] generics Optional list of types that define the generic version of the method Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the method cannot be found Method(Type, String, Type[], Type[], Boolean) Gets the reflection information for a method by searching the type and all its super types Declaration public static MethodInfo Method(Type type, string name, Type[] parameters = null, Type[] generics = null, bool logErrorInTrace = true) Parameters Type type The class/type where the method is declared String name The name of the method (case sensitive) Type [] parameters Optional parameters to target a specific overload of the method Type [] generics Optional list of types that define the generic version of the method Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the method cannot be found Property(String, Boolean) Declaration public static PropertyInfo Property(string typeColonPropertyName, bool logErrorInTrace = true) Parameters String typeColonPropertyName Boolean logErrorInTrace Returns PropertyInfo Property(Type, String, Boolean) Gets the reflection information for a property by searching the type and all its super types Declaration public static PropertyInfo Property(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type String name The name Boolean logErrorInTrace Returns PropertyInfo A property or null when type/name is null or when the property cannot be found PropertyGetter(String, Boolean) Declaration public static MethodInfo PropertyGetter(string typeColonPropertyName, bool logErrorInTrace = true) Parameters String typeColonPropertyName Boolean logErrorInTrace Returns MethodInfo PropertyGetter(Type, String, Boolean) Gets the reflection information for the getter method of a property by searching the type and all its super types Declaration public static MethodInfo PropertyGetter(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type String name The name Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the property cannot be found PropertySetter(String, Boolean) Declaration public static MethodInfo PropertySetter(string typeColonPropertyName, bool logErrorInTrace = true) Parameters String typeColonPropertyName Boolean logErrorInTrace Returns MethodInfo PropertySetter(Type, String, Boolean) Gets the reflection information for the setter method of a property by searching the type and all its super types Declaration public static MethodInfo PropertySetter(Type type, string name, bool logErrorInTrace = true) Parameters Type type The class/type String name The name Boolean logErrorInTrace Returns MethodInfo A method or null when type/name is null or when the property cannot be found StaticFieldRefAccess<F>(FieldInfo, Boolean) Creates a static field reference delegate Declaration public static AccessTools.FieldRef<F>? StaticFieldRefAccess<F>(FieldInfo fieldInfo, bool logErrorInTrace = true) Parameters FieldInfo fieldInfo The field Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef <F>> A readable/assignable delegate Type Parameters F The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type), a type that IsAssignableFrom(Type) that type; or if the field's type is an enum type, either that type or the underlying integral type of that enum type StaticFieldRefAccess<TField>(String, Boolean) Declaration public static AccessTools.FieldRef<TField>? StaticFieldRefAccess<TField>(string typeColonFieldname, bool logErrorInTrace = true) Parameters String typeColonFieldname Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef <TField>> Type Parameters TField StaticFieldRefAccess<TField>(Type, String, Boolean) Creates a static field reference delegate Declaration public static AccessTools.FieldRef<TField>? StaticFieldRefAccess<TField>(Type type, string fieldName, bool logErrorInTrace = true) Parameters Type type The type holding the field field String fieldName The field name Boolean logErrorInTrace Returns Nullable < AccessTools.FieldRef <TField>> A read and writable AccessTools.FieldRef<F> delegate Type Parameters TField The type of the field StructFieldRefAccess<T, F>(FieldInfo, Boolean) Creates a field reference delegate for an instance field of a struct Declaration public static AccessTools.StructFieldRef<T, F>? StructFieldRefAccess<T, F>(FieldInfo fieldInfo, bool logErrorInTrace = true) where T : struct Parameters FieldInfo fieldInfo The field Boolean logErrorInTrace Returns Nullable < AccessTools.StructFieldRef <T, F>> A readable/assignable delegate Type Parameters T The struct that defines the instance field F The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type), a type that IsAssignableFrom(Type) that type; or if the field's type is an enum type, either that type or the underlying integral type of that enum type Remarks This method is meant for cases where the field has already been obtained, avoiding the field searching cost in e.g. . StructFieldRefAccess<T, F>(String, Boolean) Creates a field reference delegate for an instance field of a struct Declaration public static AccessTools.StructFieldRef<T, F>? StructFieldRefAccess<T, F>(string fieldName, bool logErrorInTrace = true) where T : struct Parameters String fieldName The name of the field Boolean logErrorInTrace Returns Nullable < AccessTools.StructFieldRef <T, F>> A readable/assignable delegate Type Parameters T The struct that defines the instance field F The type of the field; or if the field's type is a reference type (a class or interface, NOT a struct or other value type), a type that IsAssignableFrom(Type) that type; or if the field's type is an enum type, either that type or the underlying integral type of that enum type TypeByName(String, Boolean) Gets a type by name. Prefers a full name with namespace but falls back to the first type matching the name otherwise Declaration public static Type TypeByName(string name, bool logErrorInTrace = true) Parameters String name The name Boolean logErrorInTrace Returns Type A type or null if not found"
  },
  "api/HarmonyLib.BUTR.Extensions.HarmonyExtensions.html": {
    "href": "api/HarmonyLib.BUTR.Extensions.HarmonyExtensions.html",
    "title": "Class HarmonyExtensions | Harmony.Extensions Documentation",
    "keywords": "Class HarmonyExtensions Extension class for working with Harmony. Inheritance Object HarmonyExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : HarmonyLib.BUTR.Extensions Assembly : Harmony.Extensions.dll Syntax public static class HarmonyExtensions Methods TryCreateReversePatcher(Harmony, MethodBase, MethodInfo) Declaration public static ReversePatcher? TryCreateReversePatcher(this Harmony harmony, MethodBase original, MethodInfo standin) Parameters Harmony harmony MethodBase original MethodInfo standin Returns Nullable < ReversePatcher > TryCreateReversePatcher(Harmony, MethodBase, MethodInfo, out Nullable<ReversePatcher>) Declaration public static bool TryCreateReversePatcher(this Harmony harmony, MethodBase original, MethodInfo standin, out ReversePatcher? result) Parameters Harmony harmony MethodBase original MethodInfo standin Nullable < ReversePatcher > result Returns Boolean TryPatch(Harmony, MethodBase, MethodInfo, MethodInfo, MethodInfo, MethodInfo) Declaration public static bool TryPatch(this Harmony harmony, MethodBase original, MethodInfo prefix = null, MethodInfo postfix = null, MethodInfo transpiler = null, MethodInfo finalizer = null) Parameters Harmony harmony MethodBase original MethodInfo prefix MethodInfo postfix MethodInfo transpiler MethodInfo finalizer Returns Boolean"
  },
  "api/HarmonyLib.BUTR.Extensions.html": {
    "href": "api/HarmonyLib.BUTR.Extensions.html",
    "title": "Namespace HarmonyLib.BUTR.Extensions | Harmony.Extensions Documentation",
    "keywords": "Namespace HarmonyLib.BUTR.Extensions Classes AccessTools2 An extension of Harmony's helper class for reflection related functions HarmonyExtensions Extension class for working with Harmony. SymbolExtensions2 Traverse2 A reflection helper to read and write private elements Traverse2<T> A reflection helper to read and write private elements"
  },
  "api/HarmonyLib.BUTR.Extensions.SymbolExtensions2.html": {
    "href": "api/HarmonyLib.BUTR.Extensions.SymbolExtensions2.html",
    "title": "Class SymbolExtensions2 | Harmony.Extensions Documentation",
    "keywords": "Class SymbolExtensions2 Inheritance Object SymbolExtensions2 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : HarmonyLib.BUTR.Extensions Assembly : Harmony.Extensions.dll Syntax public static class SymbolExtensions2 Methods GetConstructorInfo(LambdaExpression) Declaration public static ConstructorInfo GetConstructorInfo(LambdaExpression expression) Parameters LambdaExpression expression Returns ConstructorInfo GetConstructorInfo<TResult>(Expression<Func<TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<TResult>(Expression<Func<TResult>> expression) Parameters Expression < Func <TResult>> expression Returns ConstructorInfo Type Parameters TResult GetConstructorInfo<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 TResult GetConstructorInfo<T1, TResult>(Expression<Func<T1, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, TResult>(Expression<Func<T1, TResult>> expression) Parameters Expression < Func <T1, TResult>> expression Returns ConstructorInfo Type Parameters T1 TResult GetConstructorInfo<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> expression) Parameters Expression < Func <T1, T2, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 TResult GetConstructorInfo<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> expression) Parameters Expression < Func <T1, T2, T3, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 TResult GetConstructorInfo<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 T4 TResult GetConstructorInfo<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 T4 T5 TResult GetConstructorInfo<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 T4 T5 T6 TResult GetConstructorInfo<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 TResult GetConstructorInfo<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) Declaration public static ConstructorInfo GetConstructorInfo<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expression Returns ConstructorInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 TResult GetFieldInfo(LambdaExpression) Declaration public static FieldInfo GetFieldInfo(LambdaExpression expression) Parameters LambdaExpression expression Returns FieldInfo GetFieldInfo<T>(Expression<Func<T>>) Declaration public static FieldInfo GetFieldInfo<T>(Expression<Func<T>> expression) Parameters Expression < Func <T>> expression Returns FieldInfo Type Parameters T GetFieldInfo<T, TResult>(Expression<Func<T, TResult>>) Declaration public static FieldInfo GetFieldInfo<T, TResult>(Expression<Func<T, TResult>> expression) Parameters Expression < Func <T, TResult>> expression Returns FieldInfo Type Parameters T TResult GetFieldRefAccess<TField>(Expression<Func<TField>>) Declaration public static AccessTools.FieldRef<object, TField>? GetFieldRefAccess<TField>(Expression<Func<TField>> expression) Parameters Expression < Func <TField>> expression Returns Nullable < AccessTools.FieldRef < Object , TField>> Type Parameters TField GetFieldRefAccess<TField>(LambdaExpression) Declaration public static AccessTools.FieldRef<object, TField>? GetFieldRefAccess<TField>(LambdaExpression expression) Parameters LambdaExpression expression Returns Nullable < AccessTools.FieldRef < Object , TField>> Type Parameters TField GetFieldRefAccess<TObject, TField>(Expression<Func<TObject, TField>>) Declaration public static AccessTools.FieldRef<TObject, TField>? GetFieldRefAccess<TObject, TField>(Expression<Func<TObject, TField>> expression) where TObject : class Parameters Expression < Func <TObject, TField>> expression Returns Nullable < AccessTools.FieldRef <TObject, TField>> Type Parameters TObject TField GetFieldRefAccess<TObject, TField>(LambdaExpression) Declaration public static AccessTools.FieldRef<TObject, TField>? GetFieldRefAccess<TObject, TField>(LambdaExpression expression) where TObject : class Parameters LambdaExpression expression Returns Nullable < AccessTools.FieldRef <TObject, TField>> Type Parameters TObject TField GetIndexer(LambdaExpression) Declaration public static PropertyInfo GetIndexer(LambdaExpression expression) Parameters LambdaExpression expression Returns PropertyInfo GetIndexer<T, TResult>(Expression<Func<T, TResult>>) Declaration public static PropertyInfo GetIndexer<T, TResult>(Expression<Func<T, TResult>> expression) Parameters Expression < Func <T, TResult>> expression Returns PropertyInfo Type Parameters T TResult GetMethodInfo(Expression<Action>) Given a lambda expression that calls a method, returns the method info Declaration public static MethodInfo GetMethodInfo(Expression<Action> expression) Parameters Expression < Action > expression The lambda expression using the method Returns MethodInfo The method in the lambda expression GetMethodInfo(LambdaExpression) Given a lambda expression that calls a method, returns the method info Declaration public static MethodInfo GetMethodInfo(LambdaExpression expression) Parameters LambdaExpression expression The lambda expression using the method Returns MethodInfo The method in the lambda expression GetMethodInfo<T1>(Expression<Action<T1>>) Given a lambda expression that calls a method, returns the method info Declaration public static MethodInfo GetMethodInfo<T1>(Expression<Action<T1>> expression) Parameters Expression < Action <T1>> expression The lambda expression using the method Returns MethodInfo The method in the lambda expression Type Parameters T1 GetMethodInfo<TResult>(Expression<Func<TResult>>) Given a lambda expression that calls a method, returns the method info Declaration public static MethodInfo GetMethodInfo<TResult>(Expression<Func<TResult>> expression) Parameters Expression < Func <TResult>> expression The lambda expression using the method Returns MethodInfo The method in the lambda expression Type Parameters TResult The generic result type GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 TResult GetMethodInfo<T1, T2>(Expression<Action<T1, T2>>) Declaration public static MethodInfo GetMethodInfo<T1, T2>(Expression<Action<T1, T2>> expression) Parameters Expression < Action <T1, T2>> expression Returns MethodInfo Type Parameters T1 T2 GetMethodInfo<T1, TResult>(Expression<Func<T1, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, TResult>(Expression<Func<T1, TResult>> expression) Parameters Expression < Func <T1, TResult>> expression Returns MethodInfo Type Parameters T1 TResult GetMethodInfo<T1, T2, T3>(Expression<Action<T1, T2, T3>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3>(Expression<Action<T1, T2, T3>> expression) Parameters Expression < Action <T1, T2, T3>> expression Returns MethodInfo Type Parameters T1 T2 T3 GetMethodInfo<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> expression) Parameters Expression < Func <T1, T2, TResult>> expression Returns MethodInfo Type Parameters T1 T2 TResult GetMethodInfo<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>> expression) Parameters Expression < Action <T1, T2, T3, T4>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 GetMethodInfo<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> expression) Parameters Expression < Func <T1, T2, T3, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 TResult GetMethodInfo<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 GetMethodInfo<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 TResult GetMethodInfo<T1, T2, T3, T4, T5, T6>(Expression<Action<T1, T2, T3, T4, T5, T6>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6>(Expression<Action<T1, T2, T3, T4, T5, T6>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5, T6>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 GetMethodInfo<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 TResult GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7>(Expression<Action<T1, T2, T3, T4, T5, T6, T7>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5, T6, T7>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 GetMethodInfo<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, T6, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 TResult GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, T6, T7, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 TResult GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8, T9>(Expression<Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>> expression) Parameters Expression < Action <T1, T2, T3, T4, T5, T6, T7, T8, T9>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>>) Declaration public static MethodInfo GetMethodInfo<T1, T2, T3, T4, T5, T6, T7, T8, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expression) Parameters Expression < Func <T1, T2, T3, T4, T5, T6, T7, T8, TResult>> expression Returns MethodInfo Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 TResult GetPropertyGetter(LambdaExpression) Declaration public static MethodInfo GetPropertyGetter(LambdaExpression expression) Parameters LambdaExpression expression Returns MethodInfo GetPropertyGetter<T>(Expression<Func<T>>) Declaration public static MethodInfo GetPropertyGetter<T>(Expression<Func<T>> expression) Parameters Expression < Func <T>> expression Returns MethodInfo Type Parameters T GetPropertyGetter<T, TResult>(Expression<Func<T, TResult>>) Declaration public static MethodInfo GetPropertyGetter<T, TResult>(Expression<Func<T, TResult>> expression) Parameters Expression < Func <T, TResult>> expression Returns MethodInfo Type Parameters T TResult GetPropertyInfo(LambdaExpression) Declaration public static PropertyInfo GetPropertyInfo(LambdaExpression expression) Parameters LambdaExpression expression Returns PropertyInfo GetPropertyInfo<T>(Expression<Func<T>>) Declaration public static PropertyInfo GetPropertyInfo<T>(Expression<Func<T>> expression) Parameters Expression < Func <T>> expression Returns PropertyInfo Type Parameters T GetPropertyInfo<T, TResult>(Expression<Func<T, TResult>>) Declaration public static PropertyInfo GetPropertyInfo<T, TResult>(Expression<Func<T, TResult>> expression) Parameters Expression < Func <T, TResult>> expression Returns PropertyInfo Type Parameters T TResult GetPropertySetter(LambdaExpression) Declaration public static MethodInfo GetPropertySetter(LambdaExpression expression) Parameters LambdaExpression expression Returns MethodInfo GetPropertySetter<T>(Expression<Func<T>>) Declaration public static MethodInfo GetPropertySetter<T>(Expression<Func<T>> expression) Parameters Expression < Func <T>> expression Returns MethodInfo Type Parameters T GetPropertySetter<T, TResult>(Expression<Func<T, TResult>>) Declaration public static MethodInfo GetPropertySetter<T, TResult>(Expression<Func<T, TResult>> expression) Parameters Expression < Func <T, TResult>> expression Returns MethodInfo Type Parameters T TResult GetStaticFieldRefAccess<TField>(Expression<Func<TField>>) Declaration public static AccessTools.FieldRef<TField>? GetStaticFieldRefAccess<TField>(Expression<Func<TField>> expression) Parameters Expression < Func <TField>> expression Returns Nullable < AccessTools.FieldRef <TField>> Type Parameters TField GetStaticFieldRefAccess<TField>(LambdaExpression) Declaration public static AccessTools.FieldRef<TField>? GetStaticFieldRefAccess<TField>(LambdaExpression expression) Parameters LambdaExpression expression Returns Nullable < AccessTools.FieldRef <TField>> Type Parameters TField GetStructFieldRefAccess<TObject, TField>(Expression<Func<TField>>) Declaration public static AccessTools.StructFieldRef<TObject, TField>? GetStructFieldRefAccess<TObject, TField>(Expression<Func<TField>> expression) where TObject : struct Parameters Expression < Func <TField>> expression Returns Nullable < AccessTools.StructFieldRef <TObject, TField>> Type Parameters TObject TField GetStructFieldRefAccess<TObject, TField>(LambdaExpression) Declaration public static AccessTools.StructFieldRef<TObject, TField>? GetStructFieldRefAccess<TObject, TField>(LambdaExpression expression) where TObject : struct Parameters LambdaExpression expression Returns Nullable < AccessTools.StructFieldRef <TObject, TField>> Type Parameters TObject TField"
  },
  "api/HarmonyLib.BUTR.Extensions.Traverse2.html": {
    "href": "api/HarmonyLib.BUTR.Extensions.Traverse2.html",
    "title": "Class Traverse2 | Harmony.Extensions Documentation",
    "keywords": "Class Traverse2 A reflection helper to read and write private elements Inheritance Object Traverse2 Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : HarmonyLib.BUTR.Extensions Assembly : Harmony.Extensions.dll Syntax public class Traverse2 Constructors Traverse2(Object) Creates a new traverse instance from an instance Declaration public Traverse2(object root) Parameters Object root The object Traverse2(Type) Creates a new traverse instance from a class/type Declaration public Traverse2(Type type) Parameters Type type The class/type Fields CopyFields A default field action that copies fields to fields Declaration public static Action<Traverse2, Traverse2> CopyFields Field Value Action < Traverse2 , Traverse2 > Methods Create(Object) Creates a new traverse instance from an instance Declaration public static Traverse2 Create(object root) Parameters Object root The object Returns Traverse2 A instance Create(Type) Creates a new traverse instance from a class/type Declaration public static Traverse2 Create(Type type) Parameters Type type The class/type Returns Traverse2 A instance Create<T>() Creates a new traverse instance from a class T Declaration public static Traverse2 Create<T>() Returns Traverse2 A instance Type Parameters T The class CreateWithType(String) Creates a new traverse instance from a named type Declaration public static Traverse2 CreateWithType(string name) Parameters String name The type name, for format see Returns Traverse2 A instance Field(String) Moves the current traverse instance to a field Declaration public Traverse2 Field(string name) Parameters String name The type name Returns Traverse2 A traverse instance Field<T>(String) Moves the current traverse instance to a field Declaration public Traverse2<T> Field<T>(string name) Parameters String name The type name Returns Traverse2 <T> A traverse instance Type Parameters T The type of the field FieldExists() Checks if the current traverse instance is for a field Declaration public bool FieldExists() Returns Boolean True if its a field Fields() Gets all fields of the current type Declaration public List<string> Fields() Returns List < String > A list of field names GetValue() Gets the current value Declaration public object GetValue() Returns Object The value GetValue(Object[]) Invokes the current method with arguments and returns the result Declaration public object GetValue(params object[] arguments) Parameters Object [] arguments The method arguments Returns Object The value returned by the method Exceptions TargetParameterCountException The arguments array does not have the correct number of arguments. ArgumentException The elements of the arguments array do not match the signature of the method or constructor reflected by this instance. GetValue<T>() Gets the current value Declaration public T GetValue<T>() Returns T The value Type Parameters T The type of the value GetValue<T>(Object[]) Invokes the current method with arguments and returns the result Declaration public T GetValue<T>(params object[] arguments) Parameters Object [] arguments The method arguments Returns T The value returned by the method Type Parameters T The type of the value Exceptions TargetParameterCountException The arguments array does not have the correct number of arguments. ArgumentException The elements of the arguments array do not match the signature of the method or constructor reflected by this instance. GetValueType() Gets the type of the current field or property Declaration public Type GetValueType() Returns Type The type IterateFields(Object, Action<Traverse2>) Iterates over all fields of the current type and executes a traverse action Declaration public static void IterateFields(object source, Action<Traverse2> action) Parameters Object source Original object Action < Traverse2 > action The action receiving a instance for each field IterateFields(Object, Object, Action<Traverse2, Traverse2>) Iterates over all fields of the current type and executes a traverse action Declaration public static void IterateFields(object source, object target, Action<Traverse2, Traverse2> action) Parameters Object source Original object Object target Target object Action < Traverse2 , Traverse2 > action The action receiving a pair of instances for each field pair IterateFields(Object, Object, Action<String, Traverse2, Traverse2>) Iterates over all fields of the current type and executes a traverse action Declaration public static void IterateFields(object source, object target, Action<string, Traverse2, Traverse2> action) Parameters Object source Original object Object target Target object Action < String , Traverse2 , Traverse2 > action The action receiving a dot path representing the field pair and the instances IterateProperties(Object, Action<Traverse2>) Iterates over all properties of the current type and executes a traverse action Declaration public static void IterateProperties(object source, Action<Traverse2> action) Parameters Object source Original object Action < Traverse2 > action The action receiving a instance for each property IterateProperties(Object, Object, Action<Traverse2, Traverse2>) Iterates over all properties of the current type and executes a traverse action Declaration public static void IterateProperties(object source, object target, Action<Traverse2, Traverse2> action) Parameters Object source Original object Object target Target object Action < Traverse2 , Traverse2 > action The action receiving a pair of instances for each property pair IterateProperties(Object, Object, Action<String, Traverse2, Traverse2>) Iterates over all properties of the current type and executes a traverse action Declaration public static void IterateProperties(object source, object target, Action<string, Traverse2, Traverse2> action) Parameters Object source Original object Object target Target object Action < String , Traverse2 , Traverse2 > action The action receiving a dot path representing the property pair and the instances Method(String, Object[]) Moves the current traverse instance to a method Declaration public Traverse2 Method(string name, params object[] arguments) Parameters String name The name of the method Object [] arguments The arguments defining the argument types of the method overload Returns Traverse2 A traverse instance Method(String, Type[], Object[]) Moves the current traverse instance to a method Declaration public Traverse2 Method(string name, Type[] paramTypes, object[] arguments = null) Parameters String name The name of the method Type [] paramTypes The argument types of the method Object [] arguments The arguments for the method Returns Traverse2 A traverse instance MethodExists() Checks if the current traverse instance is for a method Declaration public bool MethodExists() Returns Boolean True if its a method Methods() Gets all methods of the current type Declaration public List<string> Methods() Returns List < String > A list of method names Properties() Gets all properties of the current type Declaration public List<string> Properties() Returns List < String > A list of property names Property(String, Object[]) Moves the current traverse instance to a property Declaration public Traverse2 Property(string name, object[] index = null) Parameters String name The type name Object [] index Optional property index Returns Traverse2 A traverse instance Property<T>(String, Object[]) Moves the current traverse instance to a field Declaration public Traverse2<T> Property<T>(string name, object[] index = null) Parameters String name The type name Object [] index Optional property index Returns Traverse2 <T> A traverse instance Type Parameters T The type of the property PropertyExists() Checks if the current traverse instance is for a property Declaration public bool PropertyExists() Returns Boolean True if its a property SetValue(Object) Sets a value of the current field or property Declaration public Traverse2 SetValue(object value) Parameters Object value The value Returns Traverse2 The same traverse instance ToString() Returns a string that represents the current traverse Declaration public override string ToString() Returns String A string representation Overrides Object.ToString() Type(String) Moves the current traverse instance to a inner type Declaration public Traverse2 Type(string name) Parameters String name The type name Returns Traverse2 A traverse instance TypeExists() Checks if the current traverse instance is for a type Declaration public bool TypeExists() Returns Boolean True if its a type"
  },
  "api/HarmonyLib.BUTR.Extensions.Traverse2-1.html": {
    "href": "api/HarmonyLib.BUTR.Extensions.Traverse2-1.html",
    "title": "Class Traverse2<T> | Harmony.Extensions Documentation",
    "keywords": "Class Traverse2<T> A reflection helper to read and write private elements Inheritance Object Traverse2<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : HarmonyLib.BUTR.Extensions Assembly : Harmony.Extensions.dll Syntax public class Traverse2<T> Type Parameters T The result type defined by GetValue() Constructors Traverse2(Traverse2) Creates a traverse instance from an existing instance Declaration public Traverse2(Traverse2 traverse) Parameters Traverse2 traverse The existing instance Properties Value Gets/Sets the current value Declaration public T Value { get; set; } Property Value T The value to read or write"
  },
  "index.html": {
    "href": "index.html",
    "title": "Harmony.Extensions | Harmony.Extensions Documentation",
    "keywords": "Harmony.Extensions"
  }
}